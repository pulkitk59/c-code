int fun(string s,int i,int j,bool boole,map<string,int> &mp)
    {
        if(i>j)
        {
            return true;
        }
        if (i==j)
        {
            if(boole==true)
            return s[i]=='T';
            else
            return s[i]=='F';
        }
        string temp;
        temp.append(to_string(i));
        temp.push_back(' ');
        temp.append(to_string(j));
        temp.push_back(' ');
        temp.append(to_string(boole));
        if(mp.find(temp)!=mp.end())
        {
            return mp[temp];
        }
        int ans=0;
        for(int k=i+1;k<=j-1;k=k+2)
        {
            string x=to_string(i)+to_string(k-1)+to_string(true);
            if(mp.find(x)==mp.end())
             mp[x]=fun(s,i,k-1,true,mp);
             string y=to_string(i)+to_string(k-1)+to_string(false);
            if(mp.find(y)==mp.end())
             mp[y]=fun(s,i,k-1,false,mp);
             string z=to_string(k+1)+to_string(j)+to_string(true);
             if(mp.find(z)==mp.end())
             mp[z]=fun(s,k+1,j,true,mp);
             string w=to_string(k+1)+to_string(j)+to_string(false);
             if(mp.find(w)==mp.end())
             mp[w]=fun(s,k+1,j,false,mp);
             int lt=mp[x],lf=mp[y],rt=mp[z],rf=mp[w];
            if(s[k]=='&')
            {
                if(boole==true)
                {
                    ans=(ans+lt*rt)%1003;
                }
                else
                {
                    ans=(ans+lt*rf+lf*rt+lf*rf)%1003;
                }
            }
            else if(s[k]=='|')
            {
                if(boole==true)
                {
                    ans=(ans+lt*rt+lt*rf+lf*rt)%1003;
                }
                else
                {
                    ans=(ans+lf*rf)%1003;
                }
            }
            else if(s[k]=='^')
            {
                if(boole==true)
                {
                    ans=(ans+lt*rf+lf*rt)%1003;
                }
                else
                ans=(ans+lf*rf+lt*rt)%1003;
                
            }
            
        }
        mp[temp]=ans%1003;
        return ans%1003;
        
        
        
    }
int Solution::cnttrue(string S) {
    int i=0,j=S.size()-1;
        map<string,int> mp;
        bool boole=true;
        return fun(S,i,j,boole,mp);
}
